var N=null,E="",T="t",U="u",searchIndex={};
var R=["kubernix","pathbuf","levelfilter","ipnetwork","string","config","The root path during runtime","log_level","The logging level of the application","crio_cidr","Container Networking CIDR for CRI-O","cluster_cidr","Cluster CIDR","service_cidr","Service CIDR","fallible","to_owned","clone_into","try_from","try_into","result","borrow_mut","type_id","configbuilder","ConfigBuilder","Kubernix","The Container Networking CIDR for CRI-O","The Cluster Network CIDR","The Cluster Network Service CIDR","The Nix package overlay to be used"];
searchIndex["kubernix"]={"doc":R[0],"i":[[3,"Config",R[0],"The global configuration",N,N],[3,R[24],E,"Builder for `Config`.",N,N],[3,R[25],E,"The main entry point for the application",N,N],[11,"root",E,R[6],0,[[["self"],[R[1]],["into",[R[1]]]],["self"]]],[11,R[7],E,R[8],0,[[["self"],[R[2]],["into",[R[2]]]],["self"]]],[11,R[9],E,R[26],0,[[["self"],[R[3]],["into",[R[3]]]],["self"]]],[11,R[11],E,R[27],0,[[["self"],[R[3]],["into",[R[3]]]],["self"]]],[11,R[13],E,R[28],0,[[["self"],[R[3]],["into",[R[3]]]],["self"]]],[11,"overlay",E,R[29],0,[[["self"],[R[1]],["into",[R[1]]]],["self"]]],[11,"build",E,"Builds a new `Config`.",0,[[["self"]],[[R[4]],[R[20],[R[5],R[4]]],[R[5]]]]],[11,"root",E,R[6],1,[[["self"]],[R[1]]]],[11,R[7],E,R[8],1,[[["self"]],[R[2]]]],[11,R[9],E,R[26],1,[[["self"]],[R[3]]]],[11,R[11],E,R[27],1,[[["self"]],[R[3]]]],[11,R[13],E,R[28],1,[[["self"]],[R[3]]]],[11,"overlay",E,R[29],1,[[["self"]],["option"]]],[11,"canonicalize_root",E,"Make the configs root path absolute",1,[[["self"]],[R[15]]]],[11,"to_file",E,"Write the current configuration to the internal set root…",1,[[["self"]],[R[15]]]],[11,"update_from_file",E,"Read the configuration from the internal set root path",1,[[["self"]],[R[15]]]],[11,"start",E,"Start kubernix by consuming the provided configuration",2,[[[R[5]]],[R[15]]]],[11,"new_shell",E,"Spawn a new shell into the provided configuration…",2,[[[R[5]]],[R[15]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[16],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,R[18],E,E,1,[[[U]],[R[20]]]],[11,R[19],E,E,1,[[],[R[20]]]],[11,R[21],E,E,1,[[["self"]],[T]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],["typeid"]]],[11,"vzip",E,E,1,[[],["v"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[16],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,R[18],E,E,0,[[[U]],[R[20]]]],[11,R[19],E,E,0,[[],[R[20]]]],[11,R[21],E,E,0,[[["self"]],[T]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],["typeid"]]],[11,"vzip",E,E,0,[[],["v"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[18],E,E,2,[[[U]],[R[20]]]],[11,R[19],E,E,2,[[],[R[20]]]],[11,R[21],E,E,2,[[["self"]],[T]]],[11,"borrow",E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],["typeid"]]],[11,"vzip",E,E,2,[[],["v"]]],[11,"default",E,E,0,[[],[R[23]]]],[11,"default",E,E,1,[[],["self"]]],[11,"drop",E,E,2,[[["self"]]]],[11,"clone",E,E,0,[[["self"]],[R[23]]]],[11,"clone",E,E,1,[[["self"]],[R[5]]]],[11,"fmt",E,E,1,[[["self"],["formatter"]],[R[20]]]],[11,"deserialize",E,E,1,[[["__d"]],[R[20]]]],[11,"serialize",E,E,1,[[["self"],["__s"]],[R[20]]]]],"p":[[3,R[24]],[3,"Config"],[3,R[25]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);